/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mco_gui;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import java.util.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rdpun
 */
public class CreateSVend_GUI extends javax.swing.JFrame {
    private ArrayList<items> itemSlots = new ArrayList<>();
    private ArrayList<items> chosenSpecialItems = new ArrayList<>();
    private ArrayList<SpecialItems> specialItemSlots = new ArrayList<>();
    
    
    /**
     * Creates new form CreateNVend_GUI
     */
    public CreateSVend_GUI() {
        initComponents();
        chosenSpecialItems = new ArrayList<items>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
private void populateTableWithItems() {
    int i;
    // Create the table model with the column names
    DefaultTableModel tableModel = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Item ID", "Name", "Price", "Quantity", "Calories"}
    );

    // Add data to the table model for regular items
    for (i = 0; i < 8; i++) {
     
        Object[] rowData = {
            i + 1,
            itemSlots.get(i).getItemName(),
            itemSlots.get(i).getItemAmount(),
            itemSlots.get(i).getItemQuantity(),
            itemSlots.get(i).getItemCal()
        };
        tableModel.addRow(rowData);
    }

    // Set the table model to the JTable
    jTable1.setModel(tableModel);
}

private void populateTableWithSpecialItems() {
    int i;
    // Create the table model with the column names
    DefaultTableModel tableModel = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Item ID", "Name", "Price", "Quantity", "Calories"}
    );

    // Add data to the table model for special items
    for (i = 0; i < 8; i++){
 
        Object[] rowData = {
            i + 1,
            specialItemSlots.get(i).getItemName(),
            specialItemSlots.get(i).getItemAmount(),
            specialItemSlots.get(i).getItemQuantity(),
            specialItemSlots.get(i).getItemCal()
        };
        tableModel.addRow(rowData);
    }

    // Set the table model to the JTable
    jTable2.setModel(tableModel);
}

public void initializeChosenItems() {
    items chosenItem;
    clearChosenItems();

    System.out.println("Special item slots: " + specialItemSlots.size());
    for (int i = 0; i < specialItemSlots.size(); i++) {
        String itemName = specialItemSlots.get(i).getItemName();
        int quantity;
        do {
            try {
                quantity = Integer.parseInt(JOptionPane.showInputDialog(
                        null, "Enter Quantity for " + itemName + ": (0 to 10)", "Initialize Quantity",
                        JOptionPane.QUESTION_MESSAGE));
                if (quantity < 0 || quantity > 10) {
                    JOptionPane.showMessageDialog(
                            null, "Invalid quantity entered. Please enter a value between 0 and 10.",
                            "Invalid Quantity", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                quantity = -1; // Set a negative value to trigger the loop again
            }
        } while (!(quantity >= 0 && quantity <= 10));

        chosenItem = new items(itemName, 0, specialItemSlots.get(i).getItemAmount(), specialItemSlots.get(i).getItemCal());
        chosenItem.setItemQuantity(quantity);
        chosenSpecialItems.add(chosenItem);
        System.out.printf("│ special items: %-10s  │   chosen items: %-10s    │%n",
                itemName, chosenItem.getItemName());
    }
}

public void clearChosenItems() {
    int size = chosenSpecialItems.size();
    System.out.println("Chosen Items: " + size);

    StringBuilder clearedItemsMessage = new StringBuilder("Cleared Items:\n");

    for (int i = 0; i < size; i++) {
        String itemName = chosenSpecialItems.get(0).getItemName();
        clearedItemsMessage.append(itemName).append("\n");
        chosenSpecialItems.remove(0);
    }

    // Show a pop-up with the cleared items
    JOptionPane.showMessageDialog(
            null,
            clearedItemsMessage.toString(),
            "Cleared Items",
            JOptionPane.INFORMATION_MESSAGE
    );
}

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        createVNDBtn = new javax.swing.JToggleButton();
        proceedBtn = new javax.swing.JToggleButton();
        backBtn = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jToggleButton2.setText("jToggleButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Creating a Special Vending Machine");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Price", "Quantity", "Calories"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        createVNDBtn.setText("Create");
        createVNDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createVNDBtnActionPerformed(evt);
            }
        });

        proceedBtn.setText("Proceed");
        proceedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Go Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Price", "Quantity", "Calories"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setText("Regular Vending Machine Items:");

        jLabel3.setText("Special Vending Machine Items:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createVNDBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proceedBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 9, Short.MAX_VALUE)))))
                .addGap(34, 34, 34))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createVNDBtn)
                    .addComponent(backBtn)
                    .addComponent(proceedBtn))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeItems(){
        items crushedIce = new items("Crushed Ice", (float) 10.00, 0);
        items milk = new items("Evaporated Milk", (float)20.00, 122);
        items sweetenedSaba = new items("Sweetened Saba", (float)25.00, 155);
        items jackfruit = new items("Langka Fruit", (float)15.00, 157);
        items sweetBeans = new items("Sweet Beans", (float)30.00, 172);
        items sweetenedMacapuno = new items("Macapuno", (float) 25.00, 120);
        items ubeIcecream = new items("Ube Ice Cream", (float) 50.00, 273);
        items mangoIcecream = new items("Mango Ice Cream", (float) 50.00, 290);
        
        
        SpecialItems sweetenedRedBeans = new SpecialItems("Sweetened Red Beans", (float) 5.00, 50, "Tossing the red beans...");
        SpecialItems spSweetenedMacapuno = new SpecialItems("Sweetened Macapuno", (float) 10.00, 100, "Adding sweetened macapuno...");
        SpecialItems sweetenedLangka = new SpecialItems("Sweetened Langka", (float) 10.00, 89, "Topping some Langka in...");
        SpecialItems cookedSago = new SpecialItems("Cooked Sago", (float) 5.00, 30, "Putting the cooked sago...");
        SpecialItems shavedIce = new SpecialItems("Shaved Ice", (float) 5.00, 0, "Scooping some shaved ice and throwing them in...", true);
        SpecialItems evaporatedMilk = new SpecialItems("Evaporated Milk", (float) 5.00, 112, "Pouring evaporated milk...");
        SpecialItems condensedMilk = new SpecialItems("Condensed Milk", (float) 5.00, 126, "Pouring down the condensed milk...");
        SpecialItems ubeHalaya = new SpecialItems("Ube Halaya", (float) 5.00, 103, "Throwing in ube halaya...", true);

        itemSlots.add(crushedIce);
        itemSlots.add(milk);
        itemSlots.add(sweetenedSaba);
        itemSlots.add(jackfruit);
        itemSlots.add(sweetBeans);
        itemSlots.add(sweetenedMacapuno);
        itemSlots.add(ubeIcecream);
        itemSlots.add(mangoIcecream);

        specialItemSlots.add(sweetenedRedBeans);
        specialItemSlots.add(spSweetenedMacapuno);
        specialItemSlots.add(sweetenedLangka);
        specialItemSlots.add(cookedSago);
        specialItemSlots.add(shavedIce);
        specialItemSlots.add(evaporatedMilk);
        specialItemSlots.add(condensedMilk);
        specialItemSlots.add(ubeHalaya);
    }

    public void initializeQuantity() {
    for (int i = 0; i < 8; i++) {
        String itemName = itemSlots.get(i).getItemName();
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(
            null, "Enter Quantity for " + itemName + ": ", "Initialize Quantity",
            JOptionPane.QUESTION_MESSAGE));
        itemSlots.get(i).setItemQuantity(quantity);
        itemSlots.get(i).setInitialQuantity(quantity);
    }
}

    public void initializeSpecialQuantity() {
    //System.out.println("\nStocks for Halo-halo\n");
    for (int i = 0; i < specialItemSlots.size(); i++) {
        String itemName = specialItemSlots.get(i).getItemName();
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(
            null, "Enter Quantity for " + itemName + ": ", "Initialize Special Quantity",
            JOptionPane.QUESTION_MESSAGE));
        specialItemSlots.get(i).setItemQuantity(quantity);
        specialItemSlots.get(i).setInitialQuantity(quantity);
    }
}

//Codes below are for Button Interactions
    private void createVNDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createVNDBtnActionPerformed
        // TODO add your handling code here:
        initializeItems();
        initializeQuantity();
        populateTableWithItems();
        initializeSpecialQuantity();
        populateTableWithSpecialItems();
    }//GEN-LAST:event_createVNDBtnActionPerformed

    private void proceedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedBtnActionPerformed
        new SpecialVendingMachine_GUI(itemSlots, chosenSpecialItems,specialItemSlots).setVisible(true);
    }//GEN-LAST:event_proceedBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton backBtn;
    private javax.swing.JToggleButton createVNDBtn;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton proceedBtn;
    // End of variables declaration//GEN-END:variables
}
