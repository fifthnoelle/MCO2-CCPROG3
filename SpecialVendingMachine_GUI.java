/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mco_gui;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import java.util.*;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rdpun
 */
public class SpecialVendingMachine_GUI extends javax.swing.JFrame {
    //Inventory inventory;
    MoneyBank moneyBank;
    //VendingMachine_GUI vendingMachineGUI;
    private ArrayList<items> itemSlots;
    private ArrayList<items> chosenSpecialItems;
    private ArrayList<SpecialItems> specialItemSlots;
    /**
     * Creates new form CreateNVend_GUI
     */
    public SpecialVendingMachine_GUI(ArrayList<items> itemSlots, ArrayList<items> chosenSpecialItems, ArrayList<SpecialItems> specialItemSlots) {
        initComponents();
        this.itemSlots = itemSlots;
        this.specialItemSlots = specialItemSlots;
        this.chosenSpecialItems = chosenSpecialItems;
        this.moneyBank = new MoneyBank();
        //this.vendingMachineGUI = new VendingMachine_GUI(itemSlots);
        this.moneyBank.setDenomination();
        populateTableWithItems();
        populateTableWithSpecialItems();
        initializeChosenItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void buyItem() {
    int choiceIndex, choiceQuantity, choiceOption;
    float transactionCost = 0, inputAmount;
    inputAmount = moneyBank.partialPaymentMenu();
    
    populateTableWithItems();                           //updates the table with the items added
    populateTableWithSpecialItems();
    jLabel2.setText(Float.toString(inputAmount)); //updates the cash on the GUI

    // Get chosen item ID from user using pop-up input dialog
    choiceIndex = Integer.parseInt(JOptionPane.showInputDialog(null, 
            "What do you want to buy? (Input the item no.)", 
            "Item Selection", 
            JOptionPane.QUESTION_MESSAGE)) - 1;
    
    // Shows the user's chosen item
    JOptionPane.showMessageDialog(null, 
            "Item selected [" + 
             itemSlots.get(choiceIndex).getItemName() + "]");

    // Get quantity of chosen item ID from user using pop-up input dialog
    choiceQuantity = Integer.parseInt(JOptionPane.showInputDialog(null, 
            "How many would you want to buy?", 
            "Quantity", 
            JOptionPane.QUESTION_MESSAGE));

    if (checkAvailable(choiceQuantity, choiceIndex)) {
        JOptionPane.showMessageDialog(null, "For " + choiceQuantity + " [" + itemSlots.get(choiceIndex).getItemName() + "]");
        
        transactionCost += calculateTransactionCost(choiceQuantity, choiceIndex);
        if (checkPriceMoney(inputAmount, transactionCost)) {
            JOptionPane.showMessageDialog(null, "Total Price: " + transactionCost + "\n");
            Object[] options = { "Check Out", "Cancel Transaction" };
            choiceOption = JOptionPane.showOptionDialog(null, "Choose an option:", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            
            switch (choiceOption) {
                case JOptionPane.NO_OPTION:
                    jLabel2.setText(Integer.toString(0));
                    break;
                case JOptionPane.YES_OPTION:
                    checkOut(transactionCost, choiceQuantity, choiceIndex, inputAmount);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(null, 
                    "Money is too little.", 
                    "Insufficient Funds", 
                    JOptionPane.WARNING_MESSAGE);
            jLabel2.setText(Integer.toString(0));
            initializeChosenItems();
            moneyBank.resetPartialPayment();
        }
    } else {
        JOptionPane.showMessageDialog(null, 
                "There are only " + 
               itemSlots.get(choiceIndex).getItemQuantity() + 
                        " in the vending machine right now.", 
                "Out of Stock", 
                JOptionPane.WARNING_MESSAGE);
            jLabel2.setText(Integer.toString(0));
    }
}
    
private void showChooseActionPopup() {
        JFrame frame = new JFrame("Choose Action");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 150);
        frame.setLayout(new BorderLayout());

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(1, 2));

        JButton buySpecialItemButton = new JButton("Buy Special Item");
        buySpecialItemButton.addActionListener((ActionEvent e) -> {
            buySpecialItem(0);
            frame.dispose();
        });
        panel.add(buySpecialItemButton);

        JButton buyRegularItemButton = new JButton("Buy Regular Item");
        buyRegularItemButton.addActionListener((ActionEvent e) -> {
            buyItem();
            frame.dispose();
        });
        panel.add(buyRegularItemButton);

        frame.add(panel, BorderLayout.CENTER);
        frame.setVisible(true);
    }

public boolean checkAvailable(int quantity, int itemInd) {
        if(quantity <= itemSlots.get(itemInd).getItemQuantity()){
            return true;
        }
        else 
            return false;
    }

private void populateTableWithItems() {
    int i;
    // Create the table model with the column names
    DefaultTableModel tableModel = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Item ID", "Name", "Price", "Quantity", "Calories"}
    );

    // Add data to the table model for regular items
    for (i = 0; i < 8; i++) {
     
        Object[] rowData = {
            i + 1,
            itemSlots.get(i).getItemName(),
            itemSlots.get(i).getItemAmount(),
            itemSlots.get(i).getItemQuantity(),
            itemSlots.get(i).getItemCal()
        };
        tableModel.addRow(rowData);
    }

    // Set the table model to the JTable
    jTable1.setModel(tableModel);
}

private void populateTableWithSpecialItems() {
    int i;
    // Create the table model with the column names
    DefaultTableModel tableModel = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Item ID", "Name", "Price", "Quantity", "Calories"}
    );

    // Add data to the table model for special items
    for (i = 0; i < 8; i++){
 
        Object[] rowData = {
            i + 1,
            specialItemSlots.get(i).getItemName(),
            specialItemSlots.get(i).getItemAmount(),
            specialItemSlots.get(i).getItemQuantity(),
            specialItemSlots.get(i).getItemCal()
        };
        tableModel.addRow(rowData);
    }

    // Set the table model to the JTable
    jTable2.setModel(tableModel);
}

public float calculateTransactionCost(int quantity, int index){
        float price = 0;
        int i;
        for(i=0; i<quantity;i++){
            price += itemSlots.get(index).getItemAmount();
        }

        return price;
    }

    public void checkOut(float transactionCost, int choiceQuantity, int choiceIndex, float inputAmount) {
    float totalChange;
    boolean hasChange;

    totalChange = inputAmount - transactionCost;
    
    hasChange = moneyBank.makeChange(totalChange);
        populateTableWithItems();
        populateTableWithSpecialItems();
        
    if(hasChange){
        updateQuantity(choiceIndex, choiceQuantity);
        String message=" ";
        message += "You bought [" + choiceQuantity + "] [" + itemSlots.get(choiceIndex).getItemName() + "]";
        message += "\n" + choiceQuantity + " x " + itemSlots.get(choiceIndex).getItemAmount();
        message += "\nTotal: " + transactionCost;
        jLabel2.setText(Integer.toString(0));
        populateTableWithItems();  
        populateTableWithSpecialItems();
        JOptionPane.showMessageDialog(null, message, "Check Out", JOptionPane.INFORMATION_MESSAGE);
    }
}
    
private void initializeChosenItems() {
        items chosenItem;
        //StringBuilder message = new StringBuilder("Special item slots: " + specialItemSlots.size() + "\n");

        clearChosenItems();

        for (int i = 0; i < specialItemSlots.size(); i++) {
            chosenItem = new items(specialItemSlots.get(i).getItemName(), 0, specialItemSlots.get(i).getItemAmount(), specialItemSlots.get(i).getItemCal());
            chosenSpecialItems.add(chosenItem);

            /*message.append(String.format("│ special items: %-10s  │   chosen items: %-10s    │%n",
                    specialItemSlots.get(i).getItemName(),
                    chosenSpecialItems.get(i).getItemName())); */
        }

        /*JOptionPane.showMessageDialog(null, message.toString(), "Chosen Items", JOptionPane.INFORMATION_MESSAGE); */
    }

   public void clearChosenItems() {
    int size = chosenSpecialItems.size();
    System.out.println("Chosen Items: " + size);

    //StringBuilder clearedItemsMessage = new StringBuilder("Cleared Items:\n");

    for (int i = 0; i < size; i++) {
        String itemName = chosenSpecialItems.get(0).getItemName();
        //clearedItemsMessage.append(itemName).append("\n");
        chosenSpecialItems.remove(0);
    }

    // Show a pop-up with the cleared items
    /*JOptionPane.showMessageDialog(
            null,
            clearedItemsMessage.toString(),
            "Cleared Items",
            JOptionPane.INFORMATION_MESSAGE
    ); */
}
   
    public boolean checkSpecialAvailable(int quantity, int itemInd) {
        int finalQuantity = quantity;
        
        finalQuantity = chosenSpecialItems.get(itemInd).getItemQuantity() + quantity;

        if(finalQuantity <= specialItemSlots.get(itemInd).getItemQuantity()){
            return true;
        }
        else 
            return false;
    }
    
public void buySpecialItem(float inputAmount) {
    int choiceIndex, numOfVariance = 0;
    float transactionCost = 0;
    inputAmount = moneyBank.partialPaymentMenu();
    do {
        printSpecialItems();

        String choice = JOptionPane.showInputDialog("What do you want to add to the Halo-halo?\n(Input the item number)");

        if (choice == null) {
            break; // User clicked "Cancel" or closed the dialog
        }

        try {
            choiceIndex = Integer.parseInt(choice) - 1;

            if (checkSpecialAvailable(1, choiceIndex)) {
                for (int i = 0; i < chosenSpecialItems.size(); i++) {
                    if (chosenSpecialItems.get(i).getItemName().equals(specialItemSlots.get(choiceIndex).getItemName())) {
                        chosenSpecialItems.get(i).setItemQuantity(chosenSpecialItems.get(i).getItemQuantity() + 1);
                    }
                }
                JOptionPane.showMessageDialog(null, "Item selected [" + specialItemSlots.get(choiceIndex).getItemName() + "]");
            } else {
                JOptionPane.showMessageDialog(null, "There are only " + specialItemSlots.get(choiceIndex).getItemQuantity() + " in the vending machine right now.");
            }

            String[] options = {"Yes", "No"};
            int addAnother = JOptionPane.showOptionDialog(null, "Add Another?", "", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

            if (addAnother == 1) {
                break;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid item number.");
        }
    } while (true);

    printSpecialReceipt();

    transactionCost = calculateSpecialTransactionCost();
    if (checkPriceMoney(inputAmount, transactionCost)) {
        String[] options = {"Check Out", "Cancel Transaction"};
        int choiceOption = JOptionPane.showOptionDialog(null, "Total Price: " + transactionCost + "\nCheck Out?", "", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        for (int i = 0; i < specialItemSlots.size(); i++) {
        if (chosenSpecialItems.get(i).getItemQuantity() > 0) {
            numOfVariance++;
        }
        }

        if (choiceOption == 0 && numOfVariance > 0) {
            checkOutSpecial(transactionCost, inputAmount);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Money is too little.");
        moneyBank.resetPartialPayment();
    }
    populateTableWithSpecialItems();
}
    
public float calculateSpecialTransactionCost(){
        float price = 0;
        for(int i=0; i<chosenSpecialItems.size();i++){
            price += chosenSpecialItems.get(i).getItemAmount() * chosenSpecialItems.get(i).getItemQuantity();
        }

        return price; 
    }

public void printSpecialItems() {
        String[] columnNames = {"Item no.", "Name", "Quantity", "Price", "Calories"};

        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        for (int i = 0; i < specialItemSlots.size(); i++) {
            int count = i + 1;
            Object[] rowData = {count, specialItemSlots.get(i).getItemName(),
                                specialItemSlots.get(i).getItemQuantity(),
                                "P" + specialItemSlots.get(i).getItemAmount(),
                                specialItemSlots.get(i).getItemCal()};
            tableModel.addRow(rowData);
        }

        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);

        JPanel panel = new JPanel();
        panel.add(scrollPane);

        JOptionPane.showMessageDialog(null, panel, "Special Items", JOptionPane.PLAIN_MESSAGE);
    }


public void checkOutSpecial(float transactionCost, float inputAmount) {
    float totalChange;
    int totalCal, currentInd=0, numOfVariance = 0;
    boolean indiv = false;

    StringBuilder message = new StringBuilder("\n\nCheck Out");

    for (int i = 0; i < specialItemSlots.size(); i++) {
        if (chosenSpecialItems.get(i).getItemQuantity() > 0) {
            numOfVariance++;
            currentInd = i;
            indiv = specialItemSlots.get(i).checkIndiv();
        }
    }

    if (numOfVariance == 1 && indiv) {
        message.append("\nYou bought [")
                .append(chosenSpecialItems.get(currentInd).getItemQuantity())
                .append("] [")
                .append(chosenSpecialItems.get(currentInd).getItemName())
                .append("]");
        updateSpecialQuantity(); // Assuming this is your method
        initializeChosenItems();
        
        
    } else if (numOfVariance == 1 && !indiv) {
        message.append("\nCannot be bought individually");
        // Assuming wait is a custom method for pausing, you might replace this with appropriate GUI waiting logic
        //wait(1000);
        moneyBank.resetPartialPayment();
        //specialVendMenu(); // Assuming this is your method for the vending menu
    }

    if(indiv || numOfVariance>1){
    message.append("\nTotal: ").append(transactionCost);
    totalChange = inputAmount - transactionCost;
    boolean hasChange = moneyBank.makeChange(totalChange);

    if (hasChange && numOfVariance>1) {
        showPrep(); // Assuming this is your method
        updateSpecialQuantity(); // Assuming this is your method
        initializeChosenItems();
    }else if(!hasChange){

    }
    }
    // Display the message using a JOptionPane dialog
    JOptionPane.showMessageDialog(null, message.toString(), "Check Out", JOptionPane.INFORMATION_MESSAGE);
}

   public boolean checkPriceMoney(float amount, float transactionCost){
        if(amount >= transactionCost){
            return true;
        }
        else 
            return false;
    }
   
   public void updateQuantity(int index, int inputQuantity){ 
        itemSlots.get(index).setItemQuantity(itemSlots.get(index).getItemQuantity()-inputQuantity);
    }

    public void updateSpecialQuantity(){ 
        for(int i = 0; i < specialItemSlots.size()-1; i++){
            specialItemSlots.get(i).setItemQuantity(specialItemSlots.get(i).getItemQuantity() - chosenSpecialItems.get(i).getItemQuantity());
        }
    }
    
        private void showPrep() {
        JTextArea textArea = new JTextArea(10, 40);
        textArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        for (int i = 0; i < chosenSpecialItems.size(); i++) {
            for (int j = 0; j < specialItemSlots.size(); j++) {
                if (Objects.equals(chosenSpecialItems.get(i).getItemName(), specialItemSlots.get(j).getItemName()) && chosenSpecialItems.get(i).getItemQuantity() > 0) {
                    textArea.append(specialItemSlots.get(j).getPrepStatement() + "\n");
                    /*try {
                        Thread.sleep(1500);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }*/
                }
            }
        }

        int totalCal = totalCal();
        textArea.append("\nHere is your Halo-halo!\nTotal Calories: " + totalCal + "\n");

        // Creating a JOptionPane with a scrollable text area
        JOptionPane.showMessageDialog(null, scrollPane,
                "Printing and Serving", JOptionPane.INFORMATION_MESSAGE);

        String asciiArt = """
                                 \r
                                    ,O.   //\r
                                 ,(:::)=//\r
                                (  `~(###)\r
                                 ----'`"y\r
                                  \\    /\r
                                   \\  /\r
                                  __)(__  \r
                                 '------`""";

        // Display the ASCII art separately in a popup
        JTextArea asciiArea = new JTextArea(9, 40);
        asciiArea.setEditable(false);
        asciiArea.setText(asciiArt);

        JScrollPane asciiScrollPane = new JScrollPane(asciiArea);
        asciiScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        JOptionPane.showMessageDialog(null, asciiScrollPane,
                "Serving Confirmation", JOptionPane.INFORMATION_MESSAGE);
    }
public void printSpecialReceipt() {
        String[] columnNames = {"Name", "Quantity", "Price", "Calories"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (int i = 0; i < chosenSpecialItems.size(); i++) {
            if (chosenSpecialItems.get(i).getItemQuantity() != 0) {
                Object[] rowData = {
                        chosenSpecialItems.get(i).getItemName(),
                        chosenSpecialItems.get(i).getItemQuantity(),
                        String.format("P%.2f", (float) (chosenSpecialItems.get(i).getItemAmount() * chosenSpecialItems.get(i).getItemQuantity())),
                        chosenSpecialItems.get(i).getItemCal()
                };
                model.addRow(rowData);
            }
        }

        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(new Dimension(400, 200));

        JScrollPane scrollPane = new JScrollPane(table);

        JOptionPane.showMessageDialog(null, scrollPane, "Items Chosen", JOptionPane.PLAIN_MESSAGE);
    }

public int totalCal(){
        int cal = 0;
        for(int i = 0; i < chosenSpecialItems.size(); i++){
                for(int j= 0; j<specialItemSlots.size(); j++){
                    if(Objects.equals(chosenSpecialItems.get(i).getItemName(), specialItemSlots.get(j).getItemName())){
                        cal += specialItemSlots.get(j).getItemCal() * chosenSpecialItems.get(i).getItemQuantity();
                    }
                }
            }

        return cal; 
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backBtn = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jToggleButton2.setText("jToggleButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Testing Created Special Vending Machine");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Price", "Quantity", "Calories"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        backBtn.setText("Go Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Price", "Quantity", "Calories"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel3.setText("Cash:");

        jLabel2.setText(" 0");

        jButton1.setText("Operations");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Maintenance");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Regular Vending Machine Items:");

        jLabel6.setText("Special Vending Machine Items:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addGap(341, 341, 341)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(212, 212, 212))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(jLabel9)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   


    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        showChooseActionPopup();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Maintenance_GUI(itemSlots,  moneyBank, specialItemSlots).setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton backBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}
